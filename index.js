// index.js
import { Command } from 'commander';
import http from 'http';
import fs from 'fs';
import path from 'path';

const program = new Command();

program
  .requiredOption('-h, --host <string>', 'server host (e.g. localhost)')
  .requiredOption('-p, --port <number>', 'server port (e.g. 3000)')
  .requiredOption('-c, --cache <path>', 'cache directory path');

program.parse(process.argv);
const options = program.opts();

// === –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è –∫–µ—à—É ===
if (!fs.existsSync(options.cache)) {
  console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è "${options.cache}" –Ω–µ —ñ—Å–Ω—É—î. –°—Ç–≤–æ—Ä—é—é...`);
  fs.mkdirSync(options.cache, { recursive: true });
}

// === –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π HTTP —Å–µ—Ä–≤–µ—Ä ===
const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'text/plain; charset=utf-8' });
  res.end('–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î —É—Å–ø—ñ—à–Ω–æ! ‚úÖ');
});

// === –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä ===
server.listen(options.port, options.host, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://${options.host}:${options.port}`);
  console.log(`üóÇÔ∏è –ö–µ—à –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: ${path.resolve(options.cache)}`);
});
