import http from 'http';
import fs from 'fs/promises';
import path from 'path';
import { program } from 'commander';
import superagent from 'superagent';

// ===========================
// 1Ô∏è‚É£ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è CLI
// ===========================
program
  .requiredOption('-h, --host <string>', 'server host')
  .requiredOption('-p, --port <number>', 'server port')
  .requiredOption('-c, --cache <string>', 'cache directory path');

program.parse(process.argv);
const options = program.opts();
const cacheDir = options.cache;

// –°—Ç–≤–æ—Ä—é—î–º–æ –∫–µ—à-–ø–∞–ø–∫—É, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞
await fs.mkdir(cacheDir, { recursive: true });
console.log(`üóÇÔ∏è Cache directory ready: ${cacheDir}`);

// ===========================
// 2Ô∏è‚É£ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ —à–ª—è—Ö—É –¥–æ —Ñ–∞–π–ª—É —É –∫–µ—à—ñ
// ===========================
function getCacheFilePath(code) {
  return path.join(cacheDir, `${code}.jpg`);
}

// ===========================
// 3Ô∏è‚É£ HTTP —Å–µ—Ä–≤–µ—Ä
// ===========================
const server = http.createServer(async (req, res) => {
  const urlParts = req.url.split('/');
  const code = urlParts[1]; // –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /200 ‚Üí "200"

  if (!code) {
    res.writeHead(400, { 'Content-Type': 'text/plain' });
    res.end('Bad Request: missing code');
    return;
  }

  const filePath = getCacheFilePath(code);
  console.log(`–ó–∞–ø–∏—Ç: ${req.method} ${req.url}`);

  try {
    if (req.method === 'GET') {
      try {
        // üîπ –ü—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —É –∫–µ—à—ñ
        const data = await fs.readFile(filePath);
        console.log(`‚úÖ –í–∑—è—Ç–æ –∑ –∫–µ—à—É: ${filePath}`);
        res.writeHead(200, { 'Content-Type': 'image/jpeg' });
        res.end(data);

      } catch (err) {
        if (err.code === 'ENOENT') {
          // üîπ –Ø–∫—â–æ –Ω–µ–º–∞ —É –∫–µ—à—ñ ‚Äî –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ http.cat
          console.log(`‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –∑ https://http.cat/${code}.jpg ...`);
          try {
            const response = await superagent
              .get(`https://http.cat/${code}.jpg`)
              .responseType('arraybuffer');

            const buffer = Buffer.from(response.body);
            await fs.writeFile(filePath, buffer); // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —É –∫–µ—à
            console.log(`üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —É –∫–µ—à: ${filePath}`);

            res.writeHead(200, { 'Content-Type': 'image/jpeg' });
            res.end(buffer);
          } catch (fetchErr) {
            console.error(`‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ http.cat/${code}.jpg`);
            res.writeHead(404, { 'Content-Type': 'text/plain' });
            res.end('Not Found');
          }
        } else {
          throw err;
        }
      }

    } else {
      // –Ø–∫—â–æ –º–µ—Ç–æ–¥ –Ω–µ GET
      res.writeHead(405, { 'Content-Type': 'text/plain' });
      res.end('Method not allowed');
    }

  } catch (err) {
    console.error('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞:', err);
    res.writeHead(500, { 'Content-Type': 'text/plain' });
    res.end('Internal Server Error');
  }
});

// ===========================
// 4Ô∏è‚É£ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
// ===========================
server.listen(options.port, options.host, () => {
  console.log(`üöÄ Server running at http://${options.host}:${options.port}/`);
});
